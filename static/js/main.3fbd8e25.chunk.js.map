{"version":3,"sources":["Sidebar.js","Map.js","MapMarker.js","MapSearch.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","props","data","items","entries","index","value","item","className","key","onClick","onSidebarItemClick","name","email","services","distance","length","push","mapboxgl","accessToken","Map","state","lng","lat","zoom","map","container","this","mapContainer","style","center","on","onMapLoaded","setState","getCenter","toFixed","getZoom","ref","el","React","Component","MapMarker","popup","Popup","offset","setHTML","document","createElement","id","Marker","setLngLat","setPopup","addTo","MapSearch","geocoder","MapboxGeocoder","result","onGeocodeResult","initialized","addControl","App","userLocation","newData","d","turfDistance","units","flyTo","CsvParser","parse","download","complete","results","row","idx","filter","v","Markers","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fbd8e25.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Sidebar(props) {\n    if (!props.data) return null;\n    const items = [];\n    for (let [index, value] of props.data.entries()) {\n        let item = (\n            <div className='sidebar__item' key={index} onClick={() => props.onSidebarItemClick(value)}>\n                <div className='sidebar__item-name'>{value.name}</div>\n                <div>{value.email}</div>\n                <div className='sidebar__item-services'>{value.services}</div>\n                { !!value.distance && <div>{value.distance} km</div> }\n                { index < props.data.length && <hr /> }\n            </div>\n        );\n        items.push(item);\n    }\n\n    return (\n        <div className='sidebar__container'>\n            <div className='sidebar__header'>Canadians Help</div>\n            <div className='sidebar__helptext'>Find local volunteers nearby willing to lend a hand</div>\n            {items}\n        </div>\n    );\n}\n\nexport default Sidebar;\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nmapboxgl.accessToken = 'pk.eyJ1IjoiZGFucGF6IiwiYSI6ImNrODNjdXo4NjFjN2EzbG5xdzl6YTZnZHQifQ.zPcJ5aimYUyAQvXUIdUsVw';\n\nclass Map extends React.Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      lng: -79.4,\n      lat: 43.7,\n      zoom: 10\n    };\n  }\n\n  componentDidMount() {\n    const map = new mapboxgl.Map({\n      container: this.mapContainer,\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [this.state.lng, this.state.lat],\n      zoom: this.state.zoom\n    });\n\n    map.on('load', () => {\n      this.props.onMapLoaded(map);\n    });\n\n    map.on('move', () => {\n      this.setState({\n        lng: map.getCenter().lng.toFixed(4),\n        lat: map.getCenter().lat.toFixed(4),\n        zoom: map.getZoom().toFixed(2)\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div ref={el => this.mapContainer = el} className='map__container' />\n    )\n  }\n}\n\nexport default Map;\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\n\nclass MapMarker extends React.Component {\n    render() {\n        if (!this.props.map || !this.props.data) return null;\n\n        const {\n            name,\n            email,\n            services,\n            lng,\n            lat\n        } = this.props.data;\n\n        // create the popup\n        const popup = new mapboxgl.Popup({ offset: 25 }).setHTML(\n            `<div>${name}</div><div>${email}</div><div>${services || ''}</div>`\n        );\n\n        // create DOM element for the marker\n        const el = document.createElement('div');\n        el.id = 'marker';\n\n        new mapboxgl.Marker()\n            .setLngLat([lng, lat])\n            .setPopup(popup)\n            .addTo(this.props.map);\n\n        return null;\n    }\n}\n\nexport default MapMarker;\n","import React from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nclass MapSearch extends React.Component {\n    constructor(props) {\n        super(props);\n\n        const geocoder = new MapboxGeocoder({\n            accessToken: mapboxgl.accessToken,\n            mapboxgl: mapboxgl\n        });\n\n        geocoder.on('result', (result) => {\n            if (result.result) {\n                this.props.onGeocodeResult(result.result);\n            }\n        });\n\n        this.state = {\n            geocoder,\n            initialized: false,\n        };\n    }\n\n    render() {\n        if (!this.props.map || this.state.initialized) return null;\n        this.props.map.addControl(this.state.geocoder);\n        this.setState({initialized: true});\n        return null;\n    }\n}\n\nexport default MapSearch;\n","import React from 'react';\nimport Sidebar from './Sidebar';\nimport Map from './Map';\nimport MapMarker from './MapMarker';\nimport MapSearch from './MapSearch';\nimport CsvParser from 'papaparse';\nimport './App.css';\nimport turfDistance from '@turf/distance';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      map: null,\n      data: [],\n      userLocation: null,\n    };\n  }\n\n  componentDidMount() {\n    CsvParser.parse(process.env.PUBLIC_URL + '/data.csv', {\n      download: true,\n      complete: (results) => {\n        const data = results.data.map((row, idx) => {\n          if (idx !== 0) { // skip header\n            return {\n              lat: row[3],\n              lng: row[4],\n              name: row[1],\n              email: row[9],\n              services: row[6]\n            }\n          } else {\n            return null;\n          }\n        }).filter(v => v);\n        this.setState({ data });\n      }\n    });\n  }\n\n  onMapLoaded = (map) => {\n    this.setState({ map });\n  }\n\n  onGeocodeResult = (result) => {\n    this.setState({\n      userLocation: {\n        lat: result.center[1],\n        lng: result.center[0]\n      }\n    });\n\n    const newData = (this.state.data || []).map((d) => {\n      d.distance = turfDistance(result.center, [d.lng, d.lat], { units: 'kilometers' }).toFixed(1);\n      return d;\n    });\n\n    this.setState({ data: newData });\n  }\n\n  onSidebarItemClick = (item) => {\n    this.state.map.flyTo({\n      center: [item.lng, item.lat],\n      zoom: 15\n    });\n  }\n\n  render() {\n    const Markers = [];\n    for (let [index, value] of this.state.data.entries()) {\n      Markers.push(<MapMarker key={index} map={this.state.map} data={value} />);\n    }\n\n    return (\n      <div className=\"App\">\n        <Map onMapLoaded={this.onMapLoaded} />\n        <Sidebar data={this.state.data} onSidebarItemClick={this.onSidebarItemClick} />\n        <MapSearch map={this.state.map} onGeocodeResult={this.onGeocodeResult} />\n        { Markers }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}